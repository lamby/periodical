#!/usr/bin/env python3

import re
import sys
import click
import periodical

from lxml import html, etree


@click.command()
@click.option(
    "--filename", default="", help="target filename (default: auto-generated)"
)
@click.option(
    "--keep-html",
    is_flag=True,
    default=False,
    help="Keep (and print) the HTML sources directory",
)
@click.option(
    "--verbosity",
    type=int,
    default=1,
    help="Verbosity level; 0=minimal output, 1=normal output, "
    "2=verbose output, 3=very verbose output",
)
def main(*args, **kwargs):
    return LRBToMobi(*args, **kwargs).main()


class LRBToMobi(periodical.BaseToMobi):
    NAME = "lrb-to-mobi"
    TITLE = "London Review of Books"
    PREFIX = "London_Review_of_Books"
    BASE_URL = "https://lrb.co.uk"

    def __init__(
        self,
        filename,
        keep_html,
        verbosity,
    ):
        super().__init__()

        self.filename = filename
        self.keep_html = keep_html
        self.verbosity = verbosity

    def handle_base(self):
        base = self.get(f"{self.BASE_URL}/the-paper").content
        root = html.fromstring(base)

        # Parse latest issue link
        elem = root.find(".//a[@title='Latest Issue']")
        latest = elem.attrib["href"]

        # Get latest issue
        base = self.get(f"{self.BASE_URL}/{latest}").content
        root = html.fromstring(base)

        # Parse date
        for x in ("h1", "h2"):
            elem = root.find(f".//div[@class='toc-header-holder']//{x}")
            if elem is not None:
                self.context["date"] = elem.text.split(" Â· ")[-1]
                break

        # Parse cover
        self.context["cover"] = "{}{}".format(
            self.BASE_URL,
            root.find(".//div[@class='article-issue-cover-image']//img").attrib[
                "data-appsrc"
            ],
        )

        for x in root.findall(".//div[@class='toc-grid-items']/a"):
            self.handle_article(x)

    def handle_article(self, elem):
        url = f"{self.BASE_URL}{elem.attrib['href']}"

        base = self.get(url).content

        # Strip out copyright headers
        base = re.sub(r"<!--.*?-->", "", base.decode("utf-8"))
        root = html.fromstring(base)

        author = elem.cssselect("h3")[0].text.strip()

        try:
            title = root.cssselect("div#article-heading-holder h1 span")[0].text
        except IndexError:
            title = author
            author = ""

        body = etree.tostring(root.cssselect("div.article-copy")[0]).decode("utf-8")

        # Add reviewing metadata

        for x in reversed(root.cssselect("div.article-reviewed-item")):
            metadata = etree.tostring(x).decode("utf-8")

            # Strip "Read More" link
            metadata = re.sub(r'<a href="#Read-More"[^>]*>.*?</a>', "", metadata)

            body = f"{metadata}<br>{body}"

        self.context["articles"].append(
            {
                "url": url,
                "subsection": title,
                "title": title,
                "author": author,
                "hero_image": None,
                "body": body,
            },
        )

    def handle_body(self, body):
        body = body.replace("<h2", "<h3")
        body = body.replace("</h2>", "</h3>")

        footnotes = []

        def footnote_cb(m):
            url = f"{self.BASE_URL}{m.group('url')}"

            if m.group("text") == "*":
                footnotes.append(url)
            else:
                footnotes.append(self.get(url).json()["footnote"])

            return f" [{len(footnotes)}] "

        body = re.sub(
            r'<span class="footnote-link"><a href="(?P<url>[^"]+)">(?P<text>[^<]+)</a></span>',
            footnote_cb,
            body,
        )

        if footnotes:
            body += f"<br>"
        for idx, x in enumerate(footnotes):
            body += f"<blockquote>[{idx + 1}] {x}</blockquote>"

        body = body.replace('a href="/', f'a href="{self.BASE_URL}/')
        body = body.replace('<img src="" data-appsrc="/', f'<img src="{self.BASE_URL}/')

        return body


if __name__ == "__main__":
    sys.exit(main())
